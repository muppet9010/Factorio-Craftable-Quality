local Utility = require("utility")




------------------------------------
---     Make conversion machines to increase the quality of items.
------------------------------------

local conversionSmeltingRecipeCategory = {
    type = "recipe-category",
    name = "craftable_quality-conversion_quality"
}

-- TODO: these need to be dynamically generated for the quality types in the game (supporting modded added ones).
local assemblingMachineUncommonConversionPrototype = Utility.DeepCopy(data.raw["assembling-machine"]["assembling-machine-3"]) ---@type data.AssemblingMachinePrototype
assemblingMachineUncommonConversionPrototype.name = "craftable_quality-assembling-machine-uncommon-conversion"
assemblingMachineUncommonConversionPrototype.localised_name = "assembling-machine-uncommon-conversion"
assemblingMachineUncommonConversionPrototype.allowed_effects = {} -- Don't allow anything to keep it balanced to quality modules in a real machine.
assemblingMachineUncommonConversionPrototype.module_slots = 0
assemblingMachineUncommonConversionPrototype.crafting_categories = { "craftable_quality-conversion_quality" }

data:extend({
    conversionSmeltingRecipeCategory,
    assemblingMachineUncommonConversionPrototype
})




------------------------------------
---     Make the lowest level items have craftable quality versions.
------------------------------------

-- TODO: work out a proper value for this based on random quality game cost.
local QualityCost = 10

---@param itemName string
---@param qualityName string
local function CreateQualityRecipeForItemConversionToLevel(itemName, qualityName)
    ---@type data.RecipePrototype
    local recipe = {
        type = "recipe",
        name = "craftable_quality-" .. itemName .. "-conversion_quality-" .. qualityName,
        category = "craftable_quality-conversion_quality",
        energy_required = 1,
        ingredients = { { type = "item", name = itemName, amount = QualityCost } },
        results = {
            { type = "item", name = itemName, amount = 0 }, -- Needed so we have an output slot to insert spoilt items into via script as backup.
            { type = "item", name = "craftable_quality-" .. itemName .. "-conversion_quality-" .. qualityName, amount = 1 }
        },
        main_product = "craftable_quality-" .. itemName .. "-conversion_quality-" .. qualityName
        -- TODO: Make icon autogenerated. Make localised name as auto generated.
        -- TODO: work out a proper value for this based on base game cost.
    }
    data:extend({ recipe })
end

---@param itemName string
local function CreateQualityRecipesForItemConversion(itemName)
    -- TODO: Hardcoded base game quality numbers. Get from prototypes to support other mods.
    CreateQualityRecipeForItemConversionToLevel("iron-plate", "uncommon")
end

-- TODO: make this be procedural, but just hardcode examples for now. Should be the base items that start production chains off.
local itemNames = { "iron-plate" }
for _, itemName in pairs(itemNames) do
    CreateQualityRecipesForItemConversion(itemName)
end

---@param itemName string
---@param qualityName string
local function CreateSpoilingItemPrototype(itemName, qualityName)
    local spoilingItemPrototype = Utility.DeepCopy(data.raw["item"][itemName]) --[[@as data.ItemPrototype]]
    spoilingItemPrototype.name = "craftable_quality-" .. itemName .. "-conversion_quality-" .. qualityName
    spoilingItemPrototype.localised_name = itemName .. "-conversion_quality-" .. qualityName
    spoilingItemPrototype.spoil_ticks = 120 -- TODO: Must be greater than recipe craft time as start of recipe crafting is when the timer begins. Also must allow time to be moved to a container to spoil safely. 120 was the test value for this.
    spoilingItemPrototype.spoil_to_trigger_result = {
        items_per_trigger = 1,
        trigger = {
            -- The trigger_target_mask conditions have to be inside `nested-result` so that they work correctly in Factorio. Learnt from looking at a demolisher's ash cloud generation. If they are the root objects the trigger_target_mask is ignored and all triggers fire on every entity type.
            {
                type = "direct",
                action_delivery = {
                    type = "instant",
                    source_effects = {
                        {
                            type = "nested-result",
                            action = {
                                -- This works in proper inventories, but not when inside machines or inserters, or on belts or the ground. In those cases the item just vanishes.
                                type = "direct",
                                trigger_target_mask = { "craftable_quality-can_spoil_within" },
                                filter_enabled = true,
                                ignore_collision_condition = true,
                                action_delivery = {
                                    type = "instant",
                                    source_effects = {
                                        {
                                            type = "insert-item",
                                            item = itemName,
                                            quality = qualityName,
                                            count = 1
                                        },
                                        --[[{
                                            -- This is a test effect as its easy to see what is affected by it.
                                            type = "damage",
                                            damage = { amount = 1, type = "impact" }
                                        }]]
                                    }
                                }
                            }
                        },
                        {
                            type = "nested-result",
                            action = {
                                -- Catch when not in proper inventories.
                                type = "direct",
                                trigger_target_mask = { "craftable_quality-can_not_spoil_within" },
                                filter_enabled = true,
                                ignore_collision_condition = true,
                                action_delivery = {
                                    type = "instant",
                                    source_effects = {
                                        {
                                            type = "script",
                                            effect_id = "craftable_quality-spoilt_out_of_safe_inventory-" .. itemName .. "-conversion_quality-" .. qualityName
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            -- Ideally the below would work if the `nested-result` wasn't needed for some internal Factorio code reason.
            --[[
            {
                -- This works in proper inventories, but not when inside machines or inserters, or on belts or the ground. In those cases the item just vanishes.
                type = "direct",
                trigger_target_mask = { "craftable_quality-can_spoil_within" },
                filter_enabled = true,
                ignore_collision_condition = true,
                action_delivery = {
                    type = "instant",
                    source_effects = {
                        {
                            type = "insert-item",
                            item = itemName,
                            quality = qualityName,
                            count = 1
                        },
                        {
                            -- This is a test effect as its easy to see what is affected by it.
                            type = "damage",
                            damage = { amount = 1, type = "impact" }
                        }
                    }
                }
            },
            {
                -- Catch when not in proper inventories.
                type = "direct",
                trigger_target_mask = { "craftable_quality-can_not_spoil_within" },
                filter_enabled = true,
                ignore_collision_condition = true,
                action_delivery = {
                    type = "instant",
                    source_effects = {
                        {
                            type = "script",
                            effect_id = "craftable_quality-spoilt_out_of_safe_inventory"
                        },
                        {
                            -- This is a test effect as its easy to see what is affected by it.
                            type = "damage",
                            damage = { amount = 10, type = "impact" }
                        }
                    }
                }
            }
            ]]
        }
    }

    data:extend({ spoilingItemPrototype })
end

-- TODO: Make list of items dynamically. Currently just test item for spoilage test.
CreateSpoilingItemPrototype("iron-plate", "uncommon")




------------------------------------
---     Do the trigger target type settings to detect chests
------------------------------------

data:extend({
    {
        type = "trigger-target-type",
        name = "craftable_quality-can_spoil_within"
    },
    {
        type = "trigger-target-type",
        name = "craftable_quality-can_not_spoil_within"
    }
})

-- Everything our item could be in when it spoils.
for triggerTargetMaskName, entityPrototypeTypeNameArray in pairs({
    ["craftable_quality-can_spoil_within"] = { "container", "character", "infinity-container", "logistic-container", "linked-container", "car", "cargo-wagon", "spider-vehicle" },
    ["craftable_quality-can_not_spoil_within"] = { "assembling-machine", "inserter", "transport-belt", "splitter", "underground-belt", "linked-belt", "loader", "loader-1x1", "construction-robot", "logistic-robot" }
}) do
    for _, entityPrototypeTypeName in pairs(entityPrototypeTypeNameArray) do
        local entityPrototypes = data.raw[entityPrototypeTypeName] --[[@as data.EntityWithOwnerPrototype[] ]]
        for _, entityPrototype in pairs(entityPrototypes) do
            if entityPrototype.trigger_target_mask == nil then
                entityPrototype.trigger_target_mask = data.raw["utility-constants"]["default"]["default_trigger_target_mask_by_type"][entityPrototype.type] or { "common" }
            end
            entityPrototype.trigger_target_mask[#entityPrototype.trigger_target_mask + 1] = triggerTargetMaskName
        end
    end
end
